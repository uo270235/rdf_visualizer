{"version":3,"sources":["parserShapes.js","../node_modules/shumlex/node_modules/n3/lib sync /^/N3.*$","../node_modules/shumlex/node_modules/shex/lib sync","logo.svg","components/yashe.js","components/Diagram.js","components/Alerta.js","components/editor.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","constructor","shapes","texto","this","componentCounter","existingClasses","uml","parseSentence","sentence","replace","components","currentComponent","i","length","push","trim","slice","generatePlantUML","stack","operatorStack","mainEntity","shift","precedence","forEach","component","pop","declaredComponents","Set","includes","concat","extraerContenidoClase","add","has","finalStack","compName","operand","rightOperand","leftOperand","finalComponent","nombreClase","patron","RegExp","coincidencia","match","parse","shape","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","webpackEmptyContext","EditorYashe","forwardRef","props","ref","yashe","setYashe","useState","divRef","useRef","useImperativeHandle","getYasheValue","getValue","setYasheValue","value","setValue","useEffect","options","persistent","lineNumbers","y","YASHE","current","refresh","_jsx","Diagram","_ref","diagramSource","onSvgGenerated","diagram","setDiagram","fetch","method","headers","body","then","response","text","svg","catch","error","console","dangerouslySetInnerHTML","__html","Alerta","mensaje","onClose","_jsxs","className","children","onClick","Editor","editorRef","shexCleared","setShexCleared","plantUMLCode","setPlantUMLCode","parseError","setParseError","krokiSvg","setKrokiSvg","isMermaidDiagramVisible","setIsMermaidDiagramVisible","isKrokiDiagramVisible","setIsKrokiDiagramVisible","yashes","document","querySelectorAll","remove","setTimeout","clearMermaidDiagram","mermaidContainer","getElementById","innerHTML","downloadDiagram","svgContent","filename","blob","Blob","type","url","URL","createObjectURL","link","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","parseShexInput","yasheValue","shumlex","shExToXMI","xmi","crearDiagramaUML","asignarEventos","message","_Fragment","class","shex","shapeRegex","matches","cleanedShex","classUML_F","crearMUML","plantUMLCodeGenerated","PlantUMLParser","extractLogicShapes","log","downloadKrokiDiagram","FaDownload","NavBar","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","React","StrictMode"],"mappings":"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","file":"static/js/main.45948192.chunk.js","sourcesContent":["class PlantUMLParser {\n    constructor(shapes, texto) {\n        this.texto = texto;\n        this.shapes = shapes;\n        this.componentCounter = 0;\n        this.existingClasses = [];\n        this.uml = `@startuml\n        allowmixing\n        skinparam component {\n        BackgroundColor<<AND>> #1E3A8A\n        BorderColor<<AND>> #60A5FA\n        FontColor<<AND>> #E0F2FE\n        \n        BackgroundColor<<NOT>> #F87171\n        BorderColor<<NOT>> #B91C1C\n        FontColor<<NOT>> #FFFFFF\n        \n        BackgroundColor<<OR>> #065F46\n        BorderColor<<OR>> #6EE7B7\n        FontColor<<OR>> #D1FAE5\n        }\n        \n        skinparam {\n        Shadowing true\n        RoundCorner 15\n        }\n        `;\n    }\n    \n    parseSentence(sentence) {\n        sentence = sentence.replace(/\\bAND\\b/gi, 'AND')\n            .replace(/\\bOR\\b/gi, 'OR')\n            .replace(/\\bNOT\\b/gi, 'NOT');\n\n        const components = [];\n        let currentComponent = '';\n        let i = 0;\n\n        while (i < sentence.length) {\n            if (sentence[i] === ' ') {\n                if (currentComponent) {\n                    components.push(currentComponent.replace(/:/g, '').trim());\n                    currentComponent = '';\n                }\n                i++;\n            } else if (sentence.slice(i, i + 3) === 'AND' || sentence.slice(i, i + 2) === 'OR') {\n                if (currentComponent) components.push(currentComponent.replace(/:/g, '').trim());\n                currentComponent = '';\n                components.push(sentence.slice(i, i + 3) === 'AND' ? 'AND' : 'OR');\n                i += sentence.slice(i, i + 3) === 'AND' ? 3 : 2;\n            } else if (sentence.slice(i, i + 3) === 'NOT') {\n                if (currentComponent) components.push(currentComponent.replace(/:/g, '').trim());\n                currentComponent = '';\n                components.push('NOT');\n                i += 3;\n            } else {\n                currentComponent += sentence[i];\n                i++;\n            }\n        }\n        if (currentComponent) components.push(currentComponent.replace(/:/g, '').trim());\n\n        return components;\n    }\n\n    generatePlantUML(components) {\n        const stack = [];\n        const operatorStack = [];\n        let mainEntity = components.shift(); // The main entity (e.g., Usuario)\n        \n        const precedence = {\n            'OR': 1,\n            'AND': 2,\n            'NOT': 3\n        };\n\n        components.forEach(component => {\n            if (component === 'AND' || component === 'OR' || component === 'NOT') {\n                while (operatorStack.length > 0 && precedence[operatorStack[operatorStack.length - 1]] >= precedence[component]) {\n                    stack.push(operatorStack.pop());\n                }\n                operatorStack.push(component);\n            } else {\n                stack.push(component);\n            }\n        });\n\n        while (operatorStack.length > 0) {\n            stack.push(operatorStack.pop());\n        }\n\n        const declaredComponents = new Set();\n\n        // Declarar el mainEntity como un rectángulo si no está ya en existingClasses\n        if (!this.existingClasses.includes(mainEntity)) {\n            this.uml += `class ${mainEntity}{\\n${this.extraerContenidoClase(mainEntity)}\\n}\\n`;\n            this.existingClasses.push(mainEntity);\n        }\n        declaredComponents.add(mainEntity);\n\n        // Declarar todos los componentes como rectángulos primero\n        stack.forEach(component => {\n            if (component !== 'AND' && component !== 'OR' && component !== 'NOT' && !declaredComponents.has(component)) {\n                if (!this.existingClasses.includes(component)) {\n                    this.uml += `class ${component}{\\n${this.extraerContenidoClase(component)}\\n}\\n`;\n                    this.existingClasses.push(component);\n                }\n                declaredComponents.add(component);\n            }\n        });\n\n        const finalStack = [];\n        stack.forEach(component => {\n            if (component === 'AND' || component === 'OR' || component === 'NOT') {\n                const compName = `${component}_${this.componentCounter++}`;\n                this.uml += `component [ ] as ${compName} <<${component}>>\\n`;\n\n                if (component === 'NOT') {\n                    const operand = finalStack.pop();\n                    this.uml += `${compName} --> ${operand}\\n`;\n                    finalStack.push(compName);\n                } else {\n                    const rightOperand = finalStack.pop();\n                    const leftOperand = finalStack.pop();\n                    this.uml += `${compName} --> ${leftOperand}\\n`;\n                    this.uml += `${compName} --> ${rightOperand}\\n`;\n                    finalStack.push(compName);\n                }\n            } else {\n                finalStack.push(component);\n            }\n        });\n\n        const finalComponent = finalStack.pop();\n        this.uml += `${mainEntity} --> ${finalComponent}\\n`;\n    }\n\n    extraerContenidoClase(nombreClase) {\n        // Definir el patrón para encontrar la clase y su contenido, incluyendo el guion bajo opcional\n        const patron = new RegExp(`class _?${nombreClase} \\\\{([^}]*)\\\\}`, 's');\n        // Buscar todas las coincidencias en el texto\n        const coincidencia = this.texto.match(patron);\n        \n        if (coincidencia) {\n            // Si hay coincidencias, devolver la primera (el contenido dentro de la clase)\n            return coincidencia[1].trim();\n        } else {\n            // Si no hay coincidencias, devolver una cadena vacía\n            return '';\n        }\n    }\n\n    parse() {\n        this.shapes.forEach(shape => {\n            const components = this.parseSentence(shape);\n            this.generatePlantUML(components);\n        });\n        this.uml += '@enduml';\n        return this.uml;\n    }\n}\n\n// Exportar la clase\nmodule.exports = PlantUMLParser;\n","var map = {\n\t\"./N3Lexer\": 100,\n\t\"./N3Lexer.js\": 100,\n\t\"./N3Parser\": 101,\n\t\"./N3Parser.js\": 101,\n\t\"./N3Store\": 169,\n\t\"./N3Store.js\": 169,\n\t\"./N3StreamParser\": 170,\n\t\"./N3StreamParser.js\": 170,\n\t\"./N3StreamWriter\": 177,\n\t\"./N3StreamWriter.js\": 177,\n\t\"./N3Util\": 102,\n\t\"./N3Util.js\": 102,\n\t\"./N3Writer\": 104,\n\t\"./N3Writer.js\": 104\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 333;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 652;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport YASHE from 'yashe';\n\nconst EditorYashe = forwardRef((props, ref) => {\n  const [yashe, setYashe] = useState(null);\n  const divRef = useRef(null);\n\n  useImperativeHandle(ref, () => ({\n    getYasheValue: () => {\n      return yashe ? yashe.getValue() : '';\n    },\n    setYasheValue: (value) => {\n       if(yashe) yashe.setValue(value);\n    }\n  }));\n\n  useEffect(() => {\n    if (!yashe) {\n      const options = {\n        persistent: false,\n        lineNumbers: true,\n      };\n\n      const y = YASHE(divRef.current, options);\n      y.refresh();\n      setYashe(y);\n    }\n  }, [yashe]);\n\n  return <div ref={divRef} />;\n});\n\nexport default EditorYashe;\n","import React, { useEffect, useState } from 'react';\n\nconst Diagram = ({ diagramSource, onSvgGenerated }) => {\n  const [diagram, setDiagram] = useState('');\n\n  useEffect(() => {\n    if (diagramSource) {\n      fetch('https://kroki.io/plantuml/svg', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        body: diagramSource\n      })\n        .then(response => response.text())\n        .then(svg => {\n          setDiagram(svg);\n          if (onSvgGenerated) {\n            onSvgGenerated(svg); \n          }\n        })\n        .catch(error => console.error('Error generating diagram:', error));\n    }\n  }, [diagramSource, onSvgGenerated]);\n\n  return (\n      <div dangerouslySetInnerHTML={{ __html: diagram }} />\n  );\n};\n\nexport default Diagram;\n","// Alerta.js\nimport React from 'react';\nimport './Alerta.css';\n\nconst Alerta = ({ mensaje, onClose }) => {\n  return (\n    <div className=\"alerta\">\n      <span className=\"alerta-mensaje\">{mensaje}</span>\n      <button className=\"alerta-cerrar\" onClick={onClose}>\n        &times;\n      </button>\n    </div>\n  );\n};\n\nexport default Alerta;\n","import React, { useState, useEffect, useRef } from 'react';\nimport './editor.css';\nimport EditorYashe from './yashe';\nimport shumlex from 'shumlex';\nimport PlantUMLParser from '../parserShapes';\nimport Diagram from './Diagram';\nimport Alerta from './Alerta';\nimport html2canvas from 'html2canvas';\nimport { jsPDF } from 'jspdf';\nimport { FaDownload } from 'react-icons/fa';\n\nfunction Editor() {\n  const editorRef = useRef(null);\n  const [shexCleared, setShexCleared] = useState('');\n  const [plantUMLCode, setPlantUMLCode] = useState('');\n  const [parseError, setParseError] = useState(null);\n  const [krokiSvg, setKrokiSvg] = useState(''); \n  const [isMermaidDiagramVisible, setIsMermaidDiagramVisible] = useState(false);\n  const [isKrokiDiagramVisible, setIsKrokiDiagramVisible] = useState(false);\n\n  useEffect(() => {\n    const yashes = document.querySelectorAll('.yashe');\n    if (yashes.length > 1) {\n      yashes[0].remove();\n    }\n    setTimeout(() => {\n      const example = `prefix : <http://example.org/>\nprefix xsd: <http://www.w3.org/2001/XMLSchema#>\n\n:Usuario :Hombre OR :Mujer AND NOT :Perro \n\n:Hombre {\n  :genero [ :Masculino ];\n  :mascota @:Perro *;\n  :mujer @:Mujer;\n}\n\n:Mujer {\n  :genero [ :Femenino ];\n  :marido @:Hombre ; \n  :mascota @:Perro *\n}\n\n:Perro {\n  :capacidad [ :ladrar ]\n}\n`;\n      editorRef.current.setYasheValue(example);\n    }, 1);\n  }, []);\n\n  const extractLogicShapes = (shex) => {\n    try {\n      const shapeRegex = /:\\w+\\s+(NOT\\s+)?(:\\w+\\s*(?:AND|OR|NOT|AND\\s+NOT|OR\\s+NOT)\\s*)*:\\w+/gi;\n      const matches = shex.match(shapeRegex);\n      const cleanedShex = shex.replace(shapeRegex, '').trim();\n      setShexCleared(cleanedShex);\n\n      if (!matches) {\n        setPlantUMLCode('');\n        setIsKrokiDiagramVisible(false);\n        return [];\n      }\n\n      let xmi = shumlex.shExToXMI(cleanedShex);\n      let classUML_F = shumlex.crearMUML(xmi);\n\n      const parser = new PlantUMLParser(matches, classUML_F);\n      const plantUMLCodeGenerated = parser.parse();\n\n      setPlantUMLCode(plantUMLCodeGenerated);\n      setParseError(null);\n      setIsKrokiDiagramVisible(true);\n      return matches || [];\n    } catch (error) {\n      console.error(\"Error al parsear ShEx:\", error);\n      setParseError(error.message);\n      setPlantUMLCode('');\n      setShexCleared('');\n      setIsKrokiDiagramVisible(false);\n      return null;\n    }\n  };\n\n  const clearMermaidDiagram = () => {\n    const mermaidContainer = document.getElementById('mermaid-diagram');\n    if (mermaidContainer) {\n      mermaidContainer.innerHTML = '';\n      setIsMermaidDiagramVisible(false);\n    }\n  };\n\n  const downloadDiagram = (svgContent, filename) => {\n    if (svgContent) {\n      const blob = new Blob([svgContent], { type: 'image/svg+xml' });\n      const url = URL.createObjectURL(blob);\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${filename}.svg`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    } else {\n      console.error('No Relational UML diagram content available.');\n    }\n  };\n\n  const downloadKrokiDiagram = () => {\n    if (krokiSvg) {\n      downloadDiagram(krokiSvg, 'diagramLogicUMLClass');\n    } else {\n      console.error('No Logic UML diagram content available.');\n    }\n  };\n\n  useEffect(() => {\n    const parseShexInput = () => {\n      try {\n        const yasheValue = editorRef.current.getYasheValue();\n        shumlex.shExToXMI(yasheValue);\n        const xmi = shumlex.shExToXMI(shexCleared);\n        shumlex.crearDiagramaUML('mermaid-diagram', xmi);\n        shumlex.asignarEventos('mermaid-diagram');\n        setIsMermaidDiagramVisible(true);\n      } catch (error) {  \n        console.error(\"Error al parsear ShEx:\", error);\n        setParseError(error.message);\n        setPlantUMLCode('');\n        clearMermaidDiagram();\n        setShexCleared('');\n      }\n    };\n\n    if (shexCleared !== '') {\n      parseShexInput();\n    }\n  }, [shexCleared]);\n\n  return (\n    <>\n    <div class=\"container\">\n      <div className='editor'>\n        <h1 className=\"page-title\">Schema (ShEx)</h1>\n        <EditorYashe ref={editorRef} />\n        <div className='editor-buttons'>\n          <button className='button-20' onClick={() => {\n              const yasheValue = editorRef.current.getYasheValue();\n              try {\n                shumlex.shExToXMI(yasheValue);\n                const result = extractLogicShapes(yasheValue);\n                if (result !== null) {\n                  console.log(\"Shapes extraídas y procesadas correctamente.\");\n                }\n              } catch (error) {\n                console.error(\"Error al parsear ShEx:\", error);\n                setParseError(error.message);\n                setPlantUMLCode('');\n                clearMermaidDiagram();\n                setShexCleared('');\n              }\n            }}>\n            Ver Diagrama\n          </button>\n        </div>\n           </div>\n           {parseError && (\n        <Alerta mensaje={`Error al parsear ShEx: ${parseError}`} onClose={() => setParseError(null)} />\n      )}\n              <div className=\"result-container\">\n          {plantUMLCode && \n          <div className=\"diagram-container kroki-diagram\" data-zoom-on-wheel=\"zoom-amount: 0.01; min-scale: 0.3; max-scale: 20;\" data-pan-on-drag>\n            <Diagram diagramSource={plantUMLCode} onSvgGenerated={setKrokiSvg} />\n            <div className='icon-container'>\n            {isKrokiDiagramVisible && (\n              <button className='download-icon' onClick={downloadKrokiDiagram}>\n                <FaDownload />\n              </button>\n            )}\n            </div>\n          </div>}\n          <div className={isMermaidDiagramVisible ? (isKrokiDiagramVisible ? \"diagram-container mermaid-diagram\" : \"diagram-container only-mermaid\") : \"\"} data-zoom-on-wheel=\"zoom-amount: 0.01; min-scale: 0.3; max-scale: 20;\" data-pan-on-drag>\n          <div id=\"mermaid-diagram\"></div>\n            {isMermaidDiagramVisible && (\n              <button className='download-icon' onClick={() => downloadDiagram(document.getElementById('mermaid-diagram').innerHTML, 'diagramUMLRelationalClass')}>\n                <FaDownload />\n              </button>\n              \n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Editor;\n","import React, { useEffect, useState } from 'react';\n\nconst NavBar = () => {\n  return (\n    <>\n    <nav>\n      <label className=\"logo\">System to visualize RDF data Shapes Schemas</label>\n      {/* <ul>\n        <li><a class=\"active\" href=\"#\">Home</a></li>\n        <li><a href=\"#\">About</a></li>\n        <li><a href=\"#\">Services</a></li>\n        <li><a href=\"#\">Contact</a></li>\n        <li><a href=\"#\">Feedback</a></li>\n      </ul> */}\n    </nav>\n    </>\n  );\n};\n\nexport default NavBar;\n","import logo from './logo.svg';\nimport './App.css';\nimport Editor from './components/editor';\nimport NavBar from './components/NavBar';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <NavBar></NavBar>\n      <Editor></Editor>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport Editor from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}